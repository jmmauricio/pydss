!=======================================================================
! Generated by  : PSCAD v4.2.0
!
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : Main
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE DSDyn()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

!     SUBR    3PHVSRC       ! 3-Phase Source model
!     SUBR    TSAT21        ! Transformer Saturation Subroutine

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Parameters

! Electrical Node Indexes
      INTEGER NT_5, NT_6, NT_10, NT_20

! Control Signals
      REAL    i_a1, i_a1_rms, i_b1, i_b1_rms
      REAL    i_c1, i_c1_rms, i_n1, i_n1_rms
      REAL    v_a1, v_a1_rms, v_b1, v_b1_rms
      REAL    v_c1, v_c1_rms, v_n1, v_n1_rms
      REAL    i_a2, i_a2_rms, i_b2, i_b2_rms
      REAL    i_c2, i_c2_rms, v_a2, v_a2_rms
      REAL    v_b2, v_b2_rms, v_c2, v_c2_rms
      REAL    Vsource, Fsource, RT_1, RT_2, RT_3
      REAL    RT_4

! Internal Variables
      REAL    E_MAG, F_RAD, R_PH, X_KNEE, TURNS_V

! Indexing variables
      INTEGER ISTOF, IT_0                         ! Storage Indexes
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Record local indexes
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage
      NTXFR = NTXFR + 1
      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF

! Record Offset and Increment Storage Counters
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 34
      NPGB      = NPGB + 14
      INODE     = NNODE + 2
      NNODE     = NNODE + 19
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 3

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO 100  IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
  100 CONTINUE

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 17

!---------------------------------------
! Transfers from storage arrays
!---------------------------------------

      i_a1     = STOF(ISTOF + 1)
      i_a1_rms = STOF(ISTOF + 2)
      i_b1     = STOF(ISTOF + 3)
      i_b1_rms = STOF(ISTOF + 4)
      i_c1     = STOF(ISTOF + 5)
      i_c1_rms = STOF(ISTOF + 6)
      i_n1     = STOF(ISTOF + 7)
      i_n1_rms = STOF(ISTOF + 8)
      v_a1     = STOF(ISTOF + 9)
      v_a1_rms = STOF(ISTOF + 10)
      v_b1     = STOF(ISTOF + 11)
      v_b1_rms = STOF(ISTOF + 12)
      v_c1     = STOF(ISTOF + 13)
      v_c1_rms = STOF(ISTOF + 14)
      v_n1     = STOF(ISTOF + 15)
      v_n1_rms = STOF(ISTOF + 16)
      i_a2     = STOF(ISTOF + 17)
      i_a2_rms = STOF(ISTOF + 18)
      i_b2     = STOF(ISTOF + 19)
      i_b2_rms = STOF(ISTOF + 20)
      i_c2     = STOF(ISTOF + 21)
      i_c2_rms = STOF(ISTOF + 22)
      v_a2     = STOF(ISTOF + 23)
      v_a2_rms = STOF(ISTOF + 24)
      v_b2     = STOF(ISTOF + 25)
      v_b2_rms = STOF(ISTOF + 26)
      v_c2     = STOF(ISTOF + 27)
      v_c2_rms = STOF(ISTOF + 28)
      Vsource  = STOF(ISTOF + 29)
      Fsource  = STOF(ISTOF + 30)
      RT_1     = STOF(ISTOF + 31)
      RT_2     = STOF(ISTOF + 32)
      RT_3     = STOF(ISTOF + 33)
      RT_4     = STOF(ISTOF + 34)

!---------------------------------------
! Transfer from Imports
!---------------------------------------


!---------------------------------------
! Electrical Node Lookup
!---------------------------------------

      NT_5  = NODE(INODE + 2)
      NT_6  = NODE(INODE + 3)
      NT_10 = NODE(INODE + 7)
      NT_20 = NODE(INODE + 17)

!---------------------------------------
! Read Model data (if any)
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF

!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 70:[const] Real Constant 
      RT_2 = 20.0

! 120:[const] Real Constant 
      RT_1 = 0.57735026919

! 130:[const] Real Constant 
      RT_4 = 1.41421356237

! 180:[const] Real Constant 
      Fsource = 60.0

! 470:[mult] Multiplier 
!
      RT_3 = RT_2 * RT_1
!

! 480:[mult] Multiplier 
!
      Vsource = RT_3 * RT_4
!

! 490:[source_3] Three Phase Voltage Source Model 2 'Source 1'
! Three Phase Source: Source 1  Type: Ideal
!  Mag: externally controlled, Freq: externally controlled, Phase: 0.0 degs, StartUp: 0.05 sec
      E_MAG = Vsource
      F_RAD = Fsource * TWO_PI
      R_PH  = 0.0*PI_BY180
      CALL EMTDC_3PHVSRC(SS(1), (IBRCH(1)+7), (IBRCH(1)+8), (IBRCH(1)+9)&
     &, 0.05, .TRUE., E_MAG , F_RAD, R_PH)
!

! -1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 
!  TRANSFORMER SATURATION SUBROUTINE
      IF (TIME.GT.0.1) THEN
         X_KNEE = 1.25
      ELSE
         X_KNEE = -1.25
      ENDIF
      TURNS_V = 0.230940107676
      CALL TSAT21(NT_5,NT_20, NT_10,NT_20, NT_6,NT_20,SS(1),0.21,TURNS_V&
     &,0.2,X_KNEE,60.0,1.0,0.01, 0.0, 1)
!

!---------------------------------------
! Feedbacks and transfers to storage
!---------------------------------------

      STOF(ISTOF + 1) = i_a1
      STOF(ISTOF + 2) = i_a1_rms
      STOF(ISTOF + 3) = i_b1
      STOF(ISTOF + 4) = i_b1_rms
      STOF(ISTOF + 5) = i_c1
      STOF(ISTOF + 6) = i_c1_rms
      STOF(ISTOF + 7) = i_n1
      STOF(ISTOF + 8) = i_n1_rms
      STOF(ISTOF + 9) = v_a1
      STOF(ISTOF + 10) = v_a1_rms
      STOF(ISTOF + 11) = v_b1
      STOF(ISTOF + 12) = v_b1_rms
      STOF(ISTOF + 13) = v_c1
      STOF(ISTOF + 14) = v_c1_rms
      STOF(ISTOF + 15) = v_n1
      STOF(ISTOF + 16) = v_n1_rms
      STOF(ISTOF + 17) = i_a2
      STOF(ISTOF + 18) = i_a2_rms
      STOF(ISTOF + 19) = i_b2
      STOF(ISTOF + 20) = i_b2_rms
      STOF(ISTOF + 21) = i_c2
      STOF(ISTOF + 22) = i_c2_rms
      STOF(ISTOF + 23) = v_a2
      STOF(ISTOF + 24) = v_a2_rms
      STOF(ISTOF + 25) = v_b2
      STOF(ISTOF + 26) = v_b2_rms
      STOF(ISTOF + 27) = v_c2
      STOF(ISTOF + 28) = v_c2_rms
      STOF(ISTOF + 29) = Vsource
      STOF(ISTOF + 30) = Fsource
      STOF(ISTOF + 31) = RT_1
      STOF(ISTOF + 32) = RT_2
      STOF(ISTOF + 33) = RT_3
      STOF(ISTOF + 34) = RT_4

!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE DSOut()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

      REAL    EMTDC_VVDC    ! 
!     SUBR    DGTL_RMS      ! 'RMS Measurement using Digital Samlping'

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Electrical Node Indexes
      INTEGER NT_11, NT_15, NT_16, NT_17, NT_18
      INTEGER NT_19, NT_20

! Control Signals
      REAL    i_a1, i_a1_rms, i_b1, i_b1_rms
      REAL    i_c1, i_c1_rms, i_n1, i_n1_rms
      REAL    v_a1, v_a1_rms, v_b1, v_b1_rms
      REAL    v_c1, v_c1_rms, v_n1, v_n1_rms
      REAL    i_a2, i_a2_rms, i_b2, i_b2_rms
      REAL    i_c2, i_c2_rms, v_a2, v_a2_rms
      REAL    v_b2, v_b2_rms, v_c2, v_c2_rms

! Internal Variables

! Indexing variables
      INTEGER ISTOL, ISTOI, ISTOF, IT_0           ! Storage Indexes
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Record local indexes
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage
      NTXFR = NTXFR + 1
      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)

! Record Offset and Increment Storage Counters
      IPGB      = NPGB
      NPGB      = NPGB + 14
      INODE     = NNODE + 2
      NNODE     = NNODE + 19
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 3

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO 100  IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
  100 CONTINUE

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 17

!---------------------------------------
! Transfers from storage arrays
!---------------------------------------

      i_a1     = STOF(ISTOF + 1)
      i_a1_rms = STOF(ISTOF + 2)
      i_b1     = STOF(ISTOF + 3)
      i_b1_rms = STOF(ISTOF + 4)
      i_c1     = STOF(ISTOF + 5)
      i_c1_rms = STOF(ISTOF + 6)
      i_n1     = STOF(ISTOF + 7)
      i_n1_rms = STOF(ISTOF + 8)
      v_a1     = STOF(ISTOF + 9)
      v_a1_rms = STOF(ISTOF + 10)
      v_b1     = STOF(ISTOF + 11)
      v_b1_rms = STOF(ISTOF + 12)
      v_c1     = STOF(ISTOF + 13)
      v_c1_rms = STOF(ISTOF + 14)
      v_n1     = STOF(ISTOF + 15)
      v_n1_rms = STOF(ISTOF + 16)
      i_a2     = STOF(ISTOF + 17)
      i_a2_rms = STOF(ISTOF + 18)
      i_b2     = STOF(ISTOF + 19)
      i_b2_rms = STOF(ISTOF + 20)
      i_c2     = STOF(ISTOF + 21)
      i_c2_rms = STOF(ISTOF + 22)
      v_a2     = STOF(ISTOF + 23)
      v_a2_rms = STOF(ISTOF + 24)
      v_b2     = STOF(ISTOF + 25)
      v_b2_rms = STOF(ISTOF + 26)
      v_c2     = STOF(ISTOF + 27)
      v_c2_rms = STOF(ISTOF + 28)

!---------------------------------------
! Electrical Node Lookup
!---------------------------------------

      NT_11 = NODE(INODE + 8)
      NT_15 = NODE(INODE + 12)
      NT_16 = NODE(INODE + 13)
      NT_17 = NODE(INODE + 14)
      NT_18 = NODE(INODE + 15)
      NT_19 = NODE(INODE + 16)
      NT_20 = NODE(INODE + 17)

!---------------------------------------
! Read Model data (if any)
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF

!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 10:[ammeter] Current Meter 'i_a1'
      i_a1 = (-CBR((IBRCH(1)+4), SS(1)))

! 20:[voltmetergnd] Voltmeter (Line - Ground) 'v_a1'
      v_a1 = EMTDC_VVDC(SS(1), NT_17, 0)

! 30:[voltmetergnd] Voltmeter (Line - Ground) 'v_a2'
      v_a2 = EMTDC_VVDC(SS(1), NT_11, 0)

! 40:[ammeter] Current Meter 'i_a2'
      i_a2 = ( CBR((IBRCH(1)+10), SS(1)))

! 50:[ammeter] Current Meter 'i_b1'
      i_b1 = (-CBR((IBRCH(1)+3), SS(1)))

! 60:[voltmetergnd] Voltmeter (Line - Ground) 'v_b1'
      v_b1 = EMTDC_VVDC(SS(1), NT_18, 0)

! 80:[voltmetergnd] Voltmeter (Line - Ground) 'v_b2'
      v_b2 = EMTDC_VVDC(SS(1), NT_15, 0)

! 90:[ammeter] Current Meter 'i_b2'
      i_b2 = ( CBR((IBRCH(1)+6), SS(1)))

! 100:[ammeter] Current Meter 'i_c1'
      i_c1 = (-CBR((IBRCH(1)+2), SS(1)))

! 110:[voltmetergnd] Voltmeter (Line - Ground) 'v_c1'
      v_c1 = EMTDC_VVDC(SS(1), NT_19, 0)

! 140:[voltmetergnd] Voltmeter (Line - Ground) 'v_c2'
      v_c2 = EMTDC_VVDC(SS(1), NT_16, 0)

! 150:[ammeter] Current Meter 'i_c2'
      i_c2 = ( CBR((IBRCH(1)+5), SS(1)))

! 160:[ammeter] Current Meter 'i_n1'
      i_n1 = ( CBR((IBRCH(1)+1), SS(1)))

! 170:[voltmetergnd] Voltmeter (Line - Ground) 'v_n1'
      v_n1 = EMTDC_VVDC(SS(1), NT_20, 0)

! 190:[rms-inst] Single Phase RMS Meter 
!
      CALL DGTL_RMS(64,60.0,i_a1,1.0,0.0,i_a1_rms)

! 200:[pgb] Output Channel 'i_a1_rms'

      PGB(IPGB+1) = i_a1_rms

! 210:[rms-inst] Single Phase RMS Meter 
!
      CALL DGTL_RMS(64,60.0,v_a1,1000.0,0.0,v_a1_rms)

! 220:[pgb] Output Channel 'v_a1_rms'

      PGB(IPGB+2) = v_a1_rms

! 230:[rms-inst] Single Phase RMS Meter 
!
      CALL DGTL_RMS(64,60.0,i_b1,1.0,0.0,i_b1_rms)

! 240:[pgb] Output Channel 'i_b1_rms'

      PGB(IPGB+3) = i_b1_rms

! 250:[rms-inst] Single Phase RMS Meter 
!
      CALL DGTL_RMS(64,60.0,v_b1,1000.0,0.0,v_b1_rms)

! 260:[pgb] Output Channel 'v_b1_rms'

      PGB(IPGB+4) = v_b1_rms

! 270:[rms-inst] Single Phase RMS Meter 
!
      CALL DGTL_RMS(64,60.0,i_c1,1.0,0.0,i_c1_rms)

! 280:[pgb] Output Channel 'i_c1_rms'

      PGB(IPGB+5) = i_c1_rms

! 290:[rms-inst] Single Phase RMS Meter 
!
      CALL DGTL_RMS(64,60.0,v_c1,1000.0,0.0,v_c1_rms)

! 300:[pgb] Output Channel 'v_c1_rms'

      PGB(IPGB+6) = v_c1_rms

! 310:[rms-inst] Single Phase RMS Meter 
!
      CALL DGTL_RMS(64,60.0,i_n1,1.0,0.0,i_n1_rms)

! 320:[pgb] Output Channel 'i_n1_rms'

      PGB(IPGB+7) = i_n1_rms

! 330:[rms-inst] Single Phase RMS Meter 
!
      CALL DGTL_RMS(64,60.0,v_n1,1000.0,0.0,v_n1_rms)

! 340:[pgb] Output Channel 'v_n1_rms'

      PGB(IPGB+8) = v_n1_rms

! 350:[rms-inst] Single Phase RMS Meter 
!
      CALL DGTL_RMS(64,60.0,i_a2,1000.0,0.0,i_a2_rms)

! 360:[pgb] Output Channel 'i_a2_rms'

      PGB(IPGB+9) = i_a2_rms

! 370:[rms-inst] Single Phase RMS Meter 
!
      CALL DGTL_RMS(64,60.0,v_a2,1.0,0.0,v_a2_rms)

! 380:[pgb] Output Channel 'v_a2_rms'

      PGB(IPGB+10) = v_a2_rms

! 390:[rms-inst] Single Phase RMS Meter 
!
      CALL DGTL_RMS(64,60.0,i_b2,1000.0,0.0,i_b2_rms)

! 400:[pgb] Output Channel 'i_b2_rms'

      PGB(IPGB+11) = i_b2_rms

! 410:[rms-inst] Single Phase RMS Meter 
!
      CALL DGTL_RMS(64,60.0,v_b2,1.0,0.0,v_b2_rms)

! 420:[pgb] Output Channel 'v_b2_rms'

      PGB(IPGB+12) = v_b2_rms

! 430:[rms-inst] Single Phase RMS Meter 
!
      CALL DGTL_RMS(64,60.0,i_c2,1000.0,0.0,i_c2_rms)

! 440:[pgb] Output Channel 'i_c2_rms'

      PGB(IPGB+13) = i_c2_rms

! 450:[rms-inst] Single Phase RMS Meter 
!
      CALL DGTL_RMS(64,60.0,v_c2,1.0,0.0,v_c2_rms)

! 460:[pgb] Output Channel 'v_c2_rms'

      PGB(IPGB+14) = v_c2_rms

!---------------------------------------
! Feedbacks and transfers to storage
!---------------------------------------

      STOF(ISTOF + 1) = i_a1
      STOF(ISTOF + 2) = i_a1_rms
      STOF(ISTOF + 3) = i_b1
      STOF(ISTOF + 4) = i_b1_rms
      STOF(ISTOF + 5) = i_c1
      STOF(ISTOF + 6) = i_c1_rms
      STOF(ISTOF + 7) = i_n1
      STOF(ISTOF + 8) = i_n1_rms
      STOF(ISTOF + 9) = v_a1
      STOF(ISTOF + 10) = v_a1_rms
      STOF(ISTOF + 11) = v_b1
      STOF(ISTOF + 12) = v_b1_rms
      STOF(ISTOF + 13) = v_c1
      STOF(ISTOF + 14) = v_c1_rms
      STOF(ISTOF + 15) = v_n1
      STOF(ISTOF + 16) = v_n1_rms
      STOF(ISTOF + 17) = i_a2
      STOF(ISTOF + 18) = i_a2_rms
      STOF(ISTOF + 19) = i_b2
      STOF(ISTOF + 20) = i_b2_rms
      STOF(ISTOF + 21) = i_c2
      STOF(ISTOF + 22) = i_c2_rms
      STOF(ISTOF + 23) = v_a2
      STOF(ISTOF + 24) = v_a2_rms
      STOF(ISTOF + 25) = v_b2
      STOF(ISTOF + 26) = v_b2_rms
      STOF(ISTOF + 27) = v_c2
      STOF(ISTOF + 28) = v_c2_rms

!---------------------------------------
! Close Model Data read
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

